<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>South Pole Steve</title>
  <subtitle>Steve Faulkner's Blog</subtitle>
  <id>http://www.southpolesteve.com</id>
  <link href="http://www.southpolesteve.com"/>
  <link href="http://www.southpolesteve.com/feed.xml" rel="self"/>
  <updated>2014-02-18T04:58:00Z</updated>
  <author>
    <name>Steve Faulkner</name>
  </author>
  <entry>
    <title>Why would you use Angular with Rails?</title>
    <link rel="alternate" href="/why-would-you-use-angular-with-rails/"/>
    <id>/why-would-you-use-angular-with-rails/</id>
    <published>2014-02-18T04:58:00Z</published>
    <updated>2014-02-18T04:58:00Z</updated>
    <author>
      <name>Steve Faulkner</name>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago, someone posted to our &lt;a href="https://groups.google.com/forum/#!topic/mad-railers/KVA6cbgm1oI"&gt;local Ruby meetup group&lt;/a&gt; with the following question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Recently I have seen a ton of information tutorials, blog posts etc. about combining AngularJS with rails. But thus far I have not seen a compelling reason to follow the trend. Is this nothing more than hype over a new framework or does angular offer significant improvements over the rails standard templates? As an example in tutorials I see a lot of angular repeaters replacing resource.each statements but I don&amp;rsquo;t see this kind of thing providing any tangible benefits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I ended up sending a lengthy reply which I have decided to edit a bit and repost here&amp;hellip;&lt;/p&gt;

&lt;p&gt;First off, to use a bad analogy, your question is a bit like asking &amp;ldquo;Why should I use a motorcycle?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll where are you trying to go? What are you trying to do? If your trying to get to Australia, a boat might be a better option. Or a plane would get you there much faster but cost more money. Rails and Angular are both tools and it is important to understand what you want to do so you can decide which tool is right for the job.&lt;/p&gt;

&lt;p&gt;Rails is a server side MVC framework. It provides all the tools you need to create a web app. It delivers HTML to the browser but can also power APIs. Out of the box it is primarily used for sever rendered websites.&lt;/p&gt;

&lt;p&gt;Angular is a client side javascript framework. It provides all the tools necessary to create a javascript app that runs in the browser and talks to an API. It can be delivered to the browser as a static JS file&lt;/p&gt;

&lt;p&gt;Let me try and answer your question by breaking it down into a bunch of smaller ones:&lt;/p&gt;

&lt;h3&gt;Why build a client side javascript app?&lt;/h3&gt;

&lt;p&gt;A lot of reasons. Speed is one. Only communicating via an API can be much faster. It also makes delivering your app to the browser much simpler since it is just a static HTML/JS/CSS file. Depending on the app, you may also be able to offload certain tasks to the browser which saves server resources.&lt;/p&gt;

&lt;p&gt;For me, the main advantage has come from the mentality of divorcing the backend completely from the front end. This provides better separation of concerns. Both parts can be worked on independently as long as the API remains the same. This forces me to write better code. If your front end is a JS app, you can&amp;rsquo;t call directly to the database like you could in a rails app.&lt;/p&gt;

&lt;h3&gt;Why use a javascript framework?&lt;/h3&gt;

&lt;p&gt;Frameworks allow you to write apps quickly. Just like its easier to write a web app in Ruby using Rails than completely from scratch. Of course there are draw backs to frameworks too. When you try do something the framework isn&amp;rsquo;t designed for things can get ugly quick. This point is also endlessly debated by programmers everywhere.&lt;/p&gt;

&lt;h3&gt;Why use Rails as a backend API?&lt;/h3&gt;

&lt;p&gt;Check out this &lt;a href="http://blog.alexmaccaw.com/rails-is-just-and-api-and-that-s-ok"&gt;blog post by Alex MacCaw&lt;/a&gt; that does a pretty good job of explaining Rails as a backend. Turns out Rails is pretty good at making APIs. Your views are just JSON or XML responses instead of HTML.&lt;/p&gt;

&lt;h3&gt;Why use Rails to package a javascript app?&lt;/h3&gt;

&lt;p&gt;Because the Rails asset pipeline is pretty decent at building javascript. It will help you organize, concatenate and minify your javascript. There are also ton of other tools out there that perform these tasks in various languages. Check out grunt.js for a javascript based alternative.&lt;/p&gt;

&lt;h3&gt;Why use Angular as a javascript framework?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll preface this by saying I&amp;rsquo;m a self-admitted &lt;a href="http://emberjs.com/"&gt;Ember.js&lt;/a&gt; fan boy :)&lt;/p&gt;

&lt;p&gt;Angular is designed to make building javascript apps easier. It provides man common tools so you don&amp;rsquo;t have to write them yourself (just like Rails provides ActiveRecord models). It&amp;rsquo;s worth going through some tutorials to see how Angular&amp;rsquo;s features work for you.&lt;/p&gt;

&lt;p&gt;For me, one of the biggest features of a JS framework like angular is data binding. This means that when your javascript model gets updated, those change propagate to the UI. Imagine a web app like Rdio or Spotify. When you click &amp;ldquo;play&amp;rdquo; on a track all kinds of stuff on the page changes. The song title changes, the icons change, the play bar starts moving, the album art changes. You can imagine that keeping track of what needs updating or already has updated can get messy. Hence the phrase &amp;ldquo;spaghetti&amp;rdquo; code. Angular makes this much simpler by keeping track of what elements depend on what data and updating everything automatically.&lt;/p&gt;

&lt;h3&gt;Why use Angular and Rails together?&lt;/h3&gt;

&lt;p&gt;For all the reasons above! Rails is great for building sever APIs. Angular is great for building client side javascript apps. They are both great at what they do so in combination they can make great apps.&lt;/p&gt;

&lt;p&gt;Personally, I think Rails and Ember are much better matched. They have similar philosophies about how apps should be built that make them work well together. In fact one of the Ember core team members is also a Rails core team member. But that is just my opinion. I&amp;rsquo;ve used angular too and think it is a great tool.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Make Music Madison</title>
    <link rel="alternate" href="/make-music-madison/"/>
    <id>/make-music-madison/</id>
    <published>2013-06-25T03:02:00Z</published>
    <updated>2013-06-25T03:02:00Z</updated>
    <author>
      <name>Steve Faulkner</name>
    </author>
    <content type="html">&lt;p&gt;This past Friday marked the summer solstice and Madison&amp;rsquo;s first annual city wide music festival  - &lt;a href="http://www.makemusicmadison.org/"&gt;Make Music Madison&lt;/a&gt;. If you spent any time outside, especially downtown, it was hard to miss. 270 shows, 210 artists, spread over 110 venues. Music could be heard in literally every part of the city.&lt;/p&gt;

&lt;p&gt;So how was it? Amazing! Typically music events at this scale quickly lose their sense of community. Corporate sponsorship banners and triple fried fair food move in. It makes me feel like another sheep in the herd cycling between the stage and the beer tent. Make Music Madison was the exact opposite experience. Just local people, out in their community, simply playing and listening to music. &lt;/p&gt;

&lt;p&gt;Downtown, many bands were set up right in the sidewalk. I was actively participating by just walking down the street. Stopping every block or two to hear another band play feltâ€¦ symbiotic. Stripped of the massive stages and national headliners, all that remained was people making music and people listening. Each group, feeding off the other, and creating a massive city wide concert. I have not been to an event in quite some time that gave me a such a profound sense of community. It made me proud to be a Madisonian.&lt;/p&gt;

&lt;p&gt;Bottom line, If you weren&amp;rsquo;t taking in the sounds of the city on Friday, you were truly missing out something uniquely Madison. Mark it on your calendar next year and think about participating. Dust off your old guitar, host some bands in your front yard, or just shoulder a lawn chair and take a walk down state street. You will be glad you did.&lt;/p&gt;

&lt;p&gt;You can see pictures of the event on &lt;a href="http://www.flickr.com/groups/makemusicmadison/"&gt;Flickr&lt;/a&gt; or &lt;a href="https://www.facebook.com/makemusicmadison"&gt;Facebook&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tour de Madison B-cycle</title>
    <link rel="alternate" href="/tour-de-madison-bcycle/"/>
    <id>/tour-de-madison-bcycle/</id>
    <published>2012-11-18T16:39:00Z</published>
    <updated>2012-11-18T16:39:00Z</updated>
    <author>
      <name>Steve Faulkner</name>
    </author>
    <content type="html">&lt;p&gt;In Madison, we are fortunate to have a nice bicycle sharing system called &lt;a href="http://madison.bcycle.com/home.aspx"&gt;Madison B-cycle&lt;/a&gt;. B-cycle is perfect for short trips and the occasional commute. Being located all over the city, I used B-cycles frequently last summer. In this month&amp;rsquo;s newsletter to members, the Madison B-cycle staffed proposed a challenge -  bike all 32 stations in 24 hours. The prize? A Madison B-Cycle t-shirt. How could I say no?&lt;/p&gt;

&lt;p&gt;I recruited my buddy Will to go with me and we planned our trip for a breezy 40 degree day. I even used the B-Cycle API to write a program that would optimize our route (look for another post on this later). We split the trip into 3 stages. Stage 1 started at 7AM on the corner of W. Washington and Regent and took us to 17 stations west of the capitol. Stage 2 was a quick loop of the capitol stations, which we completed over lunch. After work, we completed the final stage taking us to all the east side stations. Total time and distance: roughly 3 hours 30 minutes and just over 20 miles.&lt;/p&gt;

&lt;p&gt;Overall, the experience was quite awesome and fun!. Tour de Bcycle gave us the opportunity to see Madison in an entirely new way. I would highly recommend it to anyone interested. A 24-hour pass is only $5, so you don&amp;rsquo;t even need to be an annual member.&lt;/p&gt;

&lt;p&gt;The GPS I had with me was acting up, but you can see our &lt;a href="http://runkeeper.com/user/southpolesteve/activity/131576726"&gt;incomplete route on runkeeper&lt;/a&gt;. I also brought my DSLR along and put together a short video documenting the trip:&lt;/p&gt;

&lt;div class="flex-video"&gt;&lt;iframe src="http://www.youtube.com/embed/U_Sh93TVW8s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>url_for(anything) with ActiveModel</title>
    <link rel="alternate" href="/url-for-anything-with-activemodel/"/>
    <id>/url-for-anything-with-activemodel/</id>
    <published>2012-04-08T23:23:00Z</published>
    <updated>2012-04-08T23:23:00Z</updated>
    <author>
      <name>Steve Faulkner</name>
    </author>
    <content type="html">&lt;p&gt;This weekend, while working on upgrading &lt;a href="https://www.murfie.com"&gt;murfie.com&lt;/a&gt; to Rails 3, I found a situation requiring url_for()&amp;hellip; except, I wasn&amp;rsquo;t using it with an ActiveRecord model :/&lt;/p&gt;

&lt;p&gt;&lt;a href="http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/"&gt;Yehunda Katz and ActiveModel&lt;/a&gt; to the rescue! Rails 3&amp;rsquo;s ActiveModel is a great way to mix ActiveRecord functionality into any object. Yehunda&amp;rsquo;s article covers validations and serialization, but glosses over ActiveModel::Naming.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Naming&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;other&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Adding this module to a class means that url_for(Model) just works! Of course you need to have routes setup, but url_for will automatically construct the named routes if they match up with the model name.&lt;/p&gt;

&lt;p&gt;Under the hood, rails is calling model_name on the class of the object passed into url_for(). Model.model_name returns a string, but is actually an instance of ActiveModel::Name, which is then used by url_for() to generate the named route for the object.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;pry&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;model_name&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"User"&lt;/span&gt;
&lt;span class="n"&gt;pry&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;model_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Email Unsubscribe from Hell</title>
    <link rel="alternate" href="/email-unsubscribe-from-hell/"/>
    <id>/email-unsubscribe-from-hell/</id>
    <published>2012-03-07T16:25:00Z</published>
    <updated>2012-03-07T16:25:00Z</updated>
    <author>
      <name>Steve Faulkner</name>
    </author>
    <content type="html">&lt;p&gt;Look at this picture. See where I have circled the unsubscirbe link? Yes, that grey text with no underline is a link.  Secha Touch, who sent this email, should be ashamed.&lt;/p&gt;

&lt;p&gt;{% img left /images/unsubscribe.jpg  %}&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Transferring Data Between Heroku Applications</title>
    <link rel="alternate" href="/transfering-data-between-heroku-applications/"/>
    <id>/transfering-data-between-heroku-applications/</id>
    <published>2011-12-09T11:32:00Z</published>
    <updated>2011-12-09T11:32:00Z</updated>
    <author>
      <name>Steve Faulkner</name>
    </author>
    <content type="html">&lt;p&gt;Today I found myself needing to move data between two heroku apps.  If you have the pgbackups addon installed, it turns out this is really easy:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;heroku pgbackups:restore DATABASE `heroku pgbackups:url --app myapp` --app myapp-staging
&lt;/pre&gt;
&lt;p&gt;Heroku covers the process more in depth in their &lt;a href="&amp;amp;quot;http://devcenter.heroku.com/articles/pgbackups&amp;amp;quot;"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Heroku rocks!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails is for Beginners</title>
    <link rel="alternate" href="/rails-is-for-beginners/"/>
    <id>/rails-is-for-beginners/</id>
    <published>2011-12-08T11:09:00Z</published>
    <updated>2011-12-08T11:09:00Z</updated>
    <author>
      <name>Steve Faulkner</name>
    </author>
    <content type="html">&lt;p&gt;This morning I came across an article on hacker news titled &lt;a href="http://www.horsesaysinternet.com/code/rails-is-not-for-beginners/"&gt;Rails Is Not For Beginners&lt;/a&gt;. The article is actually about Sinatra, but the link-bait title is dead wrong. Rails is perfect for beginners and here is why &amp;hellip;&lt;/p&gt;

&lt;p&gt;A friend of mine with zero programming experience recently asked me to help him learn web development. We setup rails together, and I pointed him to some online tutorials. When he called me the next evening, he could barely contain his excitement:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Rails is awesome! I can edit, add, delete! This is a real web app and I made it!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Rails, with only a few commands you can have a fully functioning CRUD app built on scaffolding. No experienced Rails developer I know uses scaffolding. So why is it still in the source code? Because Rails is for beginners.&lt;/p&gt;

&lt;p&gt;The best way to teach anyone web development is to inspire them to learn on their own. My friend is a long way from being a productive web developer, but because of Rails he is &lt;strong&gt;excited&lt;/strong&gt; to learn more.&lt;/p&gt;

&lt;p&gt;If you are a beginner and looking for a place to start, I recommend &lt;a href="http://zfer.us/zvmvl"&gt;railstutorial.org&lt;/a&gt;. It is a fantastic resource, and best of all the online version is free.&lt;/p&gt;
</content>
  </entry>
</feed>
